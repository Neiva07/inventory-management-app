import axios from 'axios';
import { app, BrowserWindow, ipcMain, shell } from 'electron';

import * as dotenv from 'dotenv';

dotenv.config();
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const CLERK_API_SECRET_KEY = process.env.CLERK_API_SECRET_KEY;

if (!CLERK_API_SECRET_KEY) {
  throw new Error('CLERK_API_SECRET_KEY environment variable is not set');
}

const clerkClient = axios.create({baseURL: "https://api.clerk.com/v1", headers: {Authorization: `Bearer ${CLERK_API_SECRET_KEY}`}})

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow

// Register IPC handlers
console.log('Registering IPC handlers...');
ipcMain.handle('fetch-clerk-user', async (event, user_id: string) => {
  try {
    console.log("Attempting to fetch Clerk user with ID:", user_id);
    const { data } = await clerkClient.get(`/users/${user_id}`, {
      timeout: 3000,
    });
    console.log("Successfully fetched Clerk user data");
    return data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Clerk API Error:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
    } else {
      console.error('Unexpected error fetching Clerk user:', error);
    }
    throw error;
  }
});

ipcMain.handle('clerk-logout', async (event, sessionId: string) => {
  try {
    console.log("Attempting to revoke Clerk session:", sessionId);
    await clerkClient.post(`/sessions/${sessionId}/revoke`);
    console.log("Successfully revoked Clerk session");
    return true;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error('Clerk Logout Error:', {
        status: error.response?.status,
        statusText: error.response?.statusText,
        data: error.response?.data,
        message: error.message
      });
    } else {
      console.error('Unexpected error during Clerk logout:', error);
    }
    throw error;
  }
});

ipcMain.handle('open-external-url', async (event, url: string) => {
  try {
    await shell.openExternal(url);
    return true;
  } catch (error) {
    console.error('Error opening external URL:', error);
    throw error;
  }
});
console.log(`logging all env variables: `, process.env);
ipcMain.handle('get-env-variable', (event, key: string) => {
  return process.env[key] || '';
});

console.log('IPC handlers registered');

const createWindow = (): void => {
  console.log(MAIN_WINDOW_WEBPACK_ENTRY, MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY)
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1000,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true, // ðŸ‘ˆ keep enabled for security
      nodeIntegration: false, // ðŸ‘ˆ must be false in production
    },
  }); 

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Only open DevTools in development mode
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.setAsDefaultProtocolClient("inventarum");

app.on('open-url', async (e, url) => {
  e.preventDefault()
  const sessionId = new URL(url).searchParams.get("sessionId");
  
  if (sessionId) {
    try {
      const {data: session} = await clerkClient.get(`/sessions/${sessionId}`)

      if (session) {
        console.log("Clerk session:", session);
        
        // If window exists, focus it
        if (mainWindow) {
          if (mainWindow.isMinimized()) {
            mainWindow.restore();
          }
          mainWindow.focus();
        } else {
          // Only create a new window if one doesn't exist
          createWindow();
        }
        
        // Send the session token to React
        mainWindow.webContents.send("auth-session-received", session);
      } else {
        console.error("Failed to get session token:", session);
      }
    } catch (error) {
      console.error("Error retrieving Clerk session:", error);
    }
  }
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
